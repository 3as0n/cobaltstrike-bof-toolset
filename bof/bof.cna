%recordmapping = %(
A => 1,
NS => 2,
MD => 3,
MF => 4,
CNAME => 5,
SOA  => 6,
MB  => 7,
MG => 8,
MR => 9,
WKS => 0xb,
PTR => 0xc,
HINFO => 0xd,
MINFO => 0xe,
MX => 0xf,
TEXT => 0x10,
RP => 0x11,
AFSDB => 0x12,
X25 => 0x13,
ISDN => 0x14,
RT => 0x15,
AAAA => 0x1c,
SRV => 0x21,
WINSR => 0xff02,
KEY => 0x0019,
ANY => 0xff);

%enumtype = %(
all => 1,
locked => 2,
disabled => 3,
active => 4);

%reghives = %(
HKCR => 0,
HKCU => 1,
HKLM => 2,
HKU  => 3);
#sleep can't handle the actual values... so we'll just add them on the c side :(

%regtypes = %(
REG_SZ => 1,
REG_EXPAND_SZ => 2,
REG_BINARY => 3,
REG_DWORD => 4,
REG_MULTI_SZ => 7,
REG_QWORD => 11);

%inttypes = %( 
	REG_DWORD => 1, 
	REG_QWORD => 1);

# subrotine to parse options for script.
# Returns optios as a hash
sub ops {
	local('$count');
	$count = 0;
	%arguments = ohash();
	foreach $arg ($1) {
		if ($count > 0) {
			if ($arg ismatch '/.*:.*') {
				$arg = replace($arg, '\A/',"");
				($key $val) = split(":", $arg, 2);
				%arguments[$key] = $val;
			}
			else if ($arg ismatch '/.*') {
				$arg = replace($arg, '\A/',"");
				%arguments[$arg] = "TRUE";
			}
			else {
				%arguments["$count"] = $arg;
			}
		}
		$count = $count + 1;
	}
	return (%arguments);
}


sub readbof {
	local('$barch $handle $data $args');
	$barch  = barch($1);

	# read in the right BOF file
    println(script_resource("$2 $+ / $+ $2 $+ . $+ $barch $+ .o"));
	$handle = openf(script_resource("$2 $+ / $+ $2 $+ . $+ $barch $+ .o"));
	$data   = readb($handle, -1);
	closef($handle);
	if(strlen($data) == 0)
	{
		berror($1, "could not read bof file");
	}

	# pack our arguments
	#$args   = bof_pack($1, "zi", "Hello World", 1234);

	# announce what we're doing
	btask($1, "Running $2");
	return $data;
}

## --start-- dir command
alias dir {
	local('$params $keys $args $targetdir $subdirs');

	%params = ops(@_);
	@keys = keys(%params);

	$targetdir = ".\\";
	$subdirs = 0;

	if ("s" in @keys) {
		$subdirs = 1;
	}
	if ("1" in @keys) {
		$targetdir = %params["1"];
	}

	$args = bof_pack($1, "Zs", $targetdir, $subdirs);
	beacon_inline_execute($1, readbof($1, "dir"), "go", $args);
}

beacon_command_register(
	"dir",
	"[BOF] Lists a target directory using BOF.",
	"Usage: dir [directory] [/s]"
);
## --end-- dir command

## --start-- env
beacon_command_register(
"env", 
"[BOF] Print environment variables.", 
"env - Print environment variables for current process");

alias env {
	# execute it.
	beacon_inline_execute($1, readbof($1, "env"), "go");
}
## --end-- env

beacon_command_register(
"ldapsearch", 
"[BOF] BOF - Perform LDAP search.", 
"ldapsearch <query> [comma_separated_attributes] [result_count] [DC hostname or IP] [Distingished Name to use]
	\"\" works as a default for attributes (get all) DC hostname / IP (use Primary DC) and distingished name (use Base domain Level)
	0 works as default for result_count (get all)

Useful queries:

- Kerberoastable:\n(&(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))

- AS-REP Roastable:\n(&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304))

- Passwords stored with reversible encryption:\n(&(objectClass=user)(objectCategory=user)(userAccountControl:1.2.840.113556.1.4.803:=128))

If this fails with an error about paging not being supported you can try tou se nonpagedldapsearch instead (its unregistered but has the same arguments)");

alias ldapsearch {
	local('$args $attributes $result_limit $hostname $domain');
	
	if(size(@_) < 2)
	{
		berror($1, beacon_command_detail("ldapsearch"));
		return;
	}

	$attributes = iff(-istrue $3, $3, "");
	$result_limit = iff(-istrue $4, $4, 0);
	$hostname = iff(-istrue $5, $5, "");
	$domain = iff(-istrue $6, $6, "");

	$args   = bof_pack($1, "zzizz", $2, $attributes, $result_limit, $hostname, $domain);

	# execute it.
	beacon_inline_execute($1, readbof($1, "ldapsearch"), "go", $args);
}

alias nonpagedldapsearch
{
	local('$args $attributes $result_limit $hostname $domain');
	
	if(size(@_) < 2)
	{
		berror($1, beacon_command_detail("ldapsearch"));
		return;
	}

	$attributes = iff(-istrue $3, $3, "");
	$result_limit = iff(-istrue $4, $4, 0);
	$hostname = iff(-istrue $5, $5, "");
	$domain = iff(-istrue $6, $6, "");

	$args   = bof_pack($1, "zzizz", $2, $attributes, $result_limit, $hostname, $domain);

	# execute it.
	beacon_inline_execute($1, readbof($1, "nonpagedldapsearch"), "go", $args);
}

alias ipconfig {

	beacon_inline_execute($1, readbof($1, "ipconfig"), "go", $null);
}

beacon_command_register(
"ipconfig", 
"[BOF] runs an internal ipconfig command", 
"Synopsis: ipconfig \n\nLists out adapters, system hostname and configured dns server");


alias arp {
    beacon_inline_execute($1,readbof($1,'arp'),"go",$null);
}

beacon_command_register(
	"arp", 
	"[BOF] Runs an internal ARP command", 
	"Synopsis: arp \n\nLists out ARP table"
);

alias nslookup {
	local('$args $barch $lookup $server $type');
	
	if(size(@_) < 2)
	{
		berror($1, beacon_command_detail("nslookup"));
		return;
	}
	$barch  = barch($1);
	$lookup = $2;
	$server = iff(-istrue $3, $3, "");
	$type = iff(-istrue $4, iff(uc($4) in %recordmapping, %recordmapping[uc($4)], %recordmapping["A"]) , %recordmapping["A"]);
	btask($1, $server);
	if($server eq "127.0.0.1"){
		berror($1, "Localhost dns query's have a potential to crash, refusing");
		return;
	}
	if($barch eq "x86"){
	btask($1, "x86 beacons do not support custom dns nameservers, overriding to default")
	$server = ""
	}
	$args = bof_pack($1, "zzs", $lookup, $server, $type);
	beacon_inline_execute($1, readbof($1, "nslookup"), "go", $args);
}

beacon_command_register(
	"nslookup", 
	"[BOF] internally perform a dns query", 
	"Synopsis: nslookup <lookup value> <lookup server> <TYPE> \n\nPerform a DNS Query:\n<lookup value> is the ip or hostname you want to query\n<lookup server> is the server you want to query (use 0 or exclude for system default)\n<TYPE> record type to query");

alias netview {
	local('$args $domain');

	$domain = iff(-istrue $2, $2, "");
	$args = bof_pack($1, "Z", $domain);
	beacon_inline_execute($1, readbof($1, "netview"), "go", $args);
}

beacon_command_register(
	"netview",
	"[BOF] lists local workstations and servers",
	"Synopsis: netview <optional netbios domain name>"
);

alias listdns {

	beacon_inline_execute($1, readbof($1, "listdns"), "go", $null);
}

beacon_command_register(
	"listdns",
	"[BOF] lists dns cache entries",
	"Synopsis: listdns (does not take arguments)  Note this will query each found hostname for its ip address"
);

alias listmods {
	local('$args $pid');

	$pid = iff(-istrue $2, $2, 0);
	$args = bof_pack($1, "i", $pid);
	beacon_inline_execute($1, readbof($1, "listmods"), "go", $args);
}

beacon_command_register(
	"listmods",
	"[BOF] lists process modules",
	"Synopsis: listmods <opt: pid> "
);


alias netuse {
	local('$params $keys $args $device $share $user $password');

	%params = ops(@_);
	@keys = keys(%params);
	
	$device = "";
	$share = "";
	$user = "";
	$password = "";
	$delete = "FALSE";
	$persist = "FALSE";
	
	if ("1" in @keys) {
		$device = %params["1"];
		
		if ("2" in @keys) {
			$share = %params["2"];
			if ("3" in @keys) {
				$password = %params["3"];
			}
			if ("USER" in @keys) {
				$user = %params["USER"];
			}
		}
		if ("DELETE" in @keys) {
			$delete = "TRUE"
		}
		if ("PERSIST" in @keys) {
			$persist = "TRUE"
		}
	}	
	
	if ($share ne ""){
		if ($share !ismatch '\\\\.*\\.*'){
			berror($1, beacon_command_detail("netuse"));
			berror($1, "Invalid computer\\share name");
			return;
		} 
	}

	$args = bof_pack($1, "ZZZZZZ", $device, $share, $password, $user, $delete, $persist);
	beacon_inline_execute($1, readbof($1, "netuse"), "go", $args);
}

beacon_command_register(
	"netuse",
	"[BOF] Lists, connects to, or disconnects from a shared resource",
	"
Command: netuse
Summary: This command connects a computer to a shared resource or disconnects a
		 computer from a shared resource. When used without options, it lists
		 the computer's connections.
Usage:   netuse (devicename) (sharename) (password) (/USER:username) (/DELETE) (/PERSIST)
		 devicename	 Optional. The device name on the local system to list, 
						connect, or disconnect. List all devices if devicename
						is omitted.
		 sharename	  Optional. The network name of the shared resource to 
						connect the local device name to, or 'DELETE' to 
						disconnect the device.
		 password	   Optional. The password to use for the remote connection.
		 username	   Optional. The username to use for the remote connection.
		 DELETE		 Optional. Delete the connection.
		 PERSIST		Optional. Persist the connection.
"
);


alias netuser {
	local('$args $domain');
	if(size(@_) < 2){
		berror($1, beacon_command_detail("netuser"));
		return;
	}
	$domain = iff(-istrue $3, $3, "");
	$args = bof_pack($1, "ZZ", $2, $domain);
	beacon_inline_execute($1, readbof($1, "netuser"), "go", $args);
}

beacon_command_register(
	"netuser",
	"[BOF] list user info",
	"Synopsis: netuser <username> <optional: dns or netbios domain name, if not given run against local computer>"
);

alias windowlist {
	beacon_inline_execute($1, readbof($1, "windowlist"), "go", bof_pack($1, "i", iff($2 eq "all", 1, 0)));
}

beacon_command_register(
	"windowlist",
	"[BOF] list visible windows",
	"Synopsis: List windows visible on the users desktop
	optionally specify \"all\" as an argument to see every possible window"
);

alias netstat {
	beacon_inline_execute($1, readbof($1, "netstat"), "go", $null);
}

beacon_command_register(
	"netstat",
	"[BOF] get local ipv4 udp/tcp listening and connected ports"
	"Synopsis: List listening and connected ipv4 udp and tcp connections"
);

alias routeprint {
	beacon_inline_execute($1, readbof($1, "routeprint"), "go", $null);
}

beacon_command_register(
	"routeprint",
	"[BOF] prints ipv4 routes on the machine",
	"Synopsis: Lists targets ipv4 routes"
);

alias whoami {
	beacon_inline_execute($1, readbof($1, "whoami"), "go", $null);
}

beacon_command_register (
	"whoami",
	"[BOF] internal version of whoami /all"
	"run this to get the info from whoami /all without starting cmd.exe"
);

alias userenum {
	local('$args $type')
	if(size (@_) == 2)
	{
		if(@_[1] in %enumtype)
		{
			$type = %enumtype[@_[1]]
		}
		else{
			berror($1, beacon_command_detail("userenum"));
			berror($1, "Invalid filter specified");
			return;
		}
	}
	else{
		$type = %enumtype["all"];
	}
	$args = bof_pack($1, "ii", 0, $type);
	beacon_inline_execute($1, readbof($1, "netuserenum"), "go", $args);
}

alias domainenum {
	local('$args $type')
	if(size (@_) == 2)
	{
		if(@_[1] in %enumtype)
		{
			$type = %enumtype[@_[1]]
		}
		else{
			berror($1, beacon_command_detail("domainenum"));
			berror($1, "Invalid filter specified");
			return;
		}
	}
	else{
		$type = %enumtype["all"];
	}
		$args = bof_pack($1, "ii", 1, $type);
	beacon_inline_execute($1, readbof($1, "netuserenum"), "go", $args); # netuserenum here is not a mistake
}

beacon_command_register(
	"domainenum",
	"[BOF] list usersaccounts in the current domain",
	"This command lists out domain user accounts
	You may specify one of (all, active, locked, disabled) to filter accounts returned
	defaults to all if not specified;"
);

beacon_command_register(
	"userenum",
	"[BOF] List computer user accounts",
	"This command lists user accounts on the current computer
	You may specify one of (all, active, locked, disabled) to filter accounts returned
	defaults to all if not specified;"
)

alias driversigs {
	beacon_inline_execute($1, readbof($1, "driversigs"), "go", $null);
}

beacon_command_register(
	"driversigs",
	"[BOF] checks drivers for known edr vendor names",
	"Run the command and we will accept enumerate services and check the binary signatures for known edr vendor names"
);

alias netshares{
	local('$args $name')
	$name = iff(-istrue $2, $2, "");
	$args = bof_pack($1, "Zi", $name, 0);
	beacon_inline_execute($1, readbof($1, "netshares"), "go", $args);
}

beacon_command_register(
	"netshares",
	"[BOF] list shares on local or remote computer",
	"netshares <\\computername>"
);

alias netsharesAdmin{
	local('$args $name')
	$name = iff(-istrue $2, $2, "");
	$args = bof_pack($1, "Zi", $name, 1);
	beacon_inline_execute($1, readbof($1, "netshares"), "go", $args);
}

beacon_command_register(
	"netsharesAdmin",
	"[BOF] list shares on local or remote computer and gets more info then standard netshares(requires admin)",
	"netsharesAdmin <\\computername>"
);

sub bnetgroup{
	local('$args $domain $group $type')
	$type = $2;
	if($type < 0 || $type > 1)
	{
		berror($1, "Invalid type passed to bnetgroup");
		return;
	}
	if($type == 1) #list group members
	{
		$group = $3;
		$domain = iff(-istrue $4, $4, "");
	}
	else # list groups
	{
		$group = "";
		$domain = iff(-istrue $3, $3, "");
	}
	$args = bof_pack($1, "sZZ", $type, $domain, $group);
	beacon_inline_execute($1, readbof($1, "netgroup"), "go", $args);
}

alias netGroupList {
	bnetgroup($1, 0, $2);
}

alias netGroupListMembers {
	bnetgroup($1, 1, $2, $3);
}

beacon_command_register(
	"netGroupList",
	"[BOF] List Groups in this domain (or specified domain if given)",
	"netGroupList: <opt: domainname>"
);

beacon_command_register(
	"netGroupListMembers",
	"[BOF] List the members of the specified group in this domain (or specified domain if given)",
	"netGroupListMembers: <Group Name> <opt: domainname>"
);

sub bnetlocalgroup{
	local('$args $server $group $type')
	$type = $2;
	if($type < 0 || $type > 1)
	{
		berror($1, "Invalid type passed to bnetlocalgroup");
		return;
	}
	if($type == 1) #list group members
	{
		$group = $3;
		$server = iff(-istrue $4, $4, "");
	}
	else # list groups
	{
		$group = "";
		$server = iff(-istrue $3, $3, "");
	}
	$args = bof_pack($1, "sZZ", $type, $server, $group);
	beacon_inline_execute($1, readbof($1, "netlocalgroup"), "go", $args);
}

alias netLocalGroupList {
	bnetlocalgroup($1, 0, $2);
}

alias netLocalGroupListMembers {
	bnetlocalgroup($1, 1, $2, $3);
}

beacon_command_register(
	"netLocalGroupList",
	"[BOF] List Groups in this server (or specified server if given)",
	"netGroupList: <opt: servername>"
);

beacon_command_register(
	"netLocalGroupListMembers",
	"[BOF] List the members of the specified group in this server (or specified server if given)",
	"netGroupListMembers: <Group Name> <opt: servername>"
);

sub bschtasksenum{
	local('$args');
	$args = bof_pack($1, "Z", iff(-istrue $2, $2, ""));
	beacon_inline_execute($1, readbof($1, "schtasksenum"), "go", $args);
}

alias schtasksenum{
	bschtasksenum($1, $2);
}

beacon_command_register(
	"schtasksenum",
	"[BOF] enumerates all scheduled tasks on the local or target machine",
	"schtasksenum <opt:target>"
);


sub bschtasksquery{
	local('$args');
	$args = bof_pack($1, "ZZ", $2, $3);
	beacon_inline_execute($1, readbof($1, "schtasksquery"), "go", $args);
}


alias schtasksquery{
	local('$server $taskname')
	$server = "";
	if ( size(@_) < 2)
	{
		berror($1, "Invalid Usage");
		berror($1, beacon_command_detail("schtasksquery"));
		return;
	} else if(size(@_) == 2)
	{
		$taskname = $2;
	} else if(size(@_) == 3)
	{
		$server = $2;
		$taskname = $3;
	} else 
	{
		berror($1, "Invalid Usage");
		berror($1, beacon_command_detail("schtasksquery"));
		return;
	}
	bschtasksquery($1, $server, $taskname);
}

beacon_command_register(
	"schtasksquery",
	"[BOF] lists the details of the requested task",
	"schtasksquery <opt:server> <taskname>
	Note the task name must be given by full path including taskname, ex. 
	schtasksquery \\Microsoft\\Windows\\MUI\\LpRemove"
);

sub bcacls{
	beacon_inline_execute($1, readbof($1, "cacls"), "go",  bof_pack($1, "Z", $2));
}

alias cacls{
	if( size(@_) < 2)
	{
		berror($1, "requires file path");
		berror($1, beacon_command_detail("cacls"));
		return;
	}
	bcacls($1, $2);
}

beacon_command_register(
	"cacls",
	"[BOF] lists file permissions",
	"cacls <file path>
	Wildcards are supported
	ex
		cacls C:\\windows\\system32\\*
		cacls C:\\windows\\system32\\cmd.exe
	Key:
		F: Full access
		R: Read & Execute access
		C: Read, Write, Execute, Delete
		W: Write access"
);

alias sc_query {
	local('$hostname $servicename $args');
	$hostname = $null;
	$servicename = $null;

	if(size(@_) == 2)
	{
		$servicename = $2;
		$hostname = $null;
	}
	else if (size(@_) == 3)
	{
		$servicename = $2;
		$hostname = $3;
	}

	$args = bof_pack($1, "zz", $hostname, $servicename);
	beacon_inline_execute($1, readbof($1, "sc_query"), "go", $args);

}

beacon_command_register(
	"sc_query", 
	"[BOF] queries a services status", 
	"Synopsis: sc_query <opt: service name> <opt: hostname>
give no parameters to enumerate all services
Give just a service name to query just that service
Give \"\" as the service name and a remote host to enumerate all services on a remote host
Give both to query a specific service on a remote host"
);

alias sc_qc {
	local('$hostname $servicename $args');


	if(size(@_) == 2)
	{
		$servicename = $2;
		$hostname = $null;
	}
	else if (size(@_) == 3)
	{
		$servicename = $2;
		$hostname = $3;
	}
	else
	{
		berror($1, beacon_command_detail("sc_qc"));
		return;
	}


	$args = bof_pack($1, "zz", $hostname, $servicename);
	beacon_inline_execute($1, readbof($1, "sc_qc"), "go", $args);
}

beacon_command_register(
	"sc_qc", 
	"[BOF] queries a services configuration", 
	"Synopsis: sc_qc  <service name> <opt: hostname>
	 hostname is optional, and the local system is targeted if it is not found"
);


alias sc_qdescription {
	local('$hostname $servicename $args');

	if(size(@_) == 2)
	{
		$servicename = $2;
		$hostname = $null;
	}
	else if (size(@_) == 3)
	{
		$servicename = $2;
		$hostname = $3;
	}
	else
	{
		berror($1, beacon_command_detail("sc_qdescription"));
		return;
	}

		$args = bof_pack($1, "zz", $hostname, $servicename);
		beacon_inline_execute($1, readbof($1, "sc_qdescription"), "go", $args);

}

beacon_command_register(
	"sc_qdescription", 
	"[BOF] queries a services description", 
	"Synopsis: sc_qdescription <service name> <opt: hostname>
	hostname is optional, and the local system is targeted if it is not found");

#2 = hostname
#3 = servicename
sub bsc_qfailure{
	beacon_inline_execute($1, readbof($1, "sc_qfailure"), "go", bof_pack($1, "zz", $2, $3))
}

alias sc_qfailure{
	local('$hostname $servicename $args');
	if(size(@_) == 2)
	{
		$servicename = $2;
		$hostname = $null;
	}
	else if (size(@_) == 3)
	{
		$servicename = $2;
		$hostname = $3;
	}
	else
	{
		berror($1, beacon_command_detail("sc_qfailure"));
		return;
	}

	bsc_qfailure($1, $hostname, $servicename);
}

beacon_command_register(
	"sc_qfailure",
	"[BOF] list service failure actions",
	"usage: sc_qfailure [servicename] [opt: hostname]"
);

sub bsc_qtriggerinfo{
	beacon_inline_execute($1, readbof($1, "sc_qtriggerinfo"), "go", bof_pack($1, "zz", $2, $3))
}

alias sc_qtriggerinfo{
	local('$hostname $servicename $args');
	if(size(@_) == 2)
	{
		$servicename = $2;
		$hostname = $null;
	}
	else if (size(@_) == 3)
	{
		$servicename = $2;
		$hostname = $3;
	}
	else
	{
		berror($1, beacon_command_detail("sc_qtriggerinfo"));
		return;
	}

	bsc_qtriggerinfo($1, $hostname, $servicename);
}

beacon_command_register(
	"sc_qtriggerinfo",
	"[BOF] lists service triggers",
	"usage: sc_qtriggers [servicename] [opt: hostname]"
);


alias sc_enum{
	#$2 = NULL if not given which is what makes this ok
	beacon_inline_execute($1, readbof($1, "sc_enum"), "go", bof_pack($1, "z", $2));
}

beacon_command_register(
	"sc_enum",
	"[BOF] Enumerate all service configs in depth",
	"usage: sc_enum [opt: hostname]"
);

alias reg_query
{
	#I need hostname Hive, path, key type value(s)
	#test if val in pos 1 is in Hive, if not, then assume it is a hostname
	# values at end, if multisz pack them using a variable bof string
	local('$hostname $hive $path $key $i')
	$packstr = "zizz";
	if(size(@_) < 3){
		berror($1, beacon_command_detail("reg_query"));
		return;
	}
	else{
		if($2 in %reghives)
		{
			#targeting local system
			$hostname = $null;
			$i = 1;
		}
		else{
			$hostname = "\\\\" . $2;
			$i = 2;
		}
		if (@_[$i] in %reghives)
		{
			$hive = %reghives[@_[$i]];
			$i++;
		}
		else
		{
			berror($1, beacon_command_detail("reg_query"));
			berror($1, "Provided registry hive value is invalid");
			return;
		}
		$path = @_[$i];
		println($path);
		$i++;
		if($i < size(@_))
		{
			$key = @_[$i];
			println("set subkey value to $key");
		}
		else
		{
			$key = "";
		}
		$args = bof_pack($1, "zizzi", $hostname, $hive, $path, $key, 0);
		beacon_inline_execute($1, readbof($1, "reg_query"), "go", $args);
	}

}
beacon_command_register(
	"reg_query",
	"[BOF] querys registry Key OR value",
"<opt:hostname> <hive> <path> <opt: value to query>
hive should be one of:
	HKLM
	HKCU
	HKU
	HKCR
If a value to query is not specified, that one key is enumerated");

alias reg_query_recursive{
	local('$hostname $hive $path $i')
	$packstr = "zizz";
	if(size(@_) < 3){
		berror($1, beacon_command_detail("reg_query_recursive"));
		return;
	}
	else{
		if($2 in %reghives)
		{
			#targeting local system
			$hostname = $null;
			$i = 1;
		}
		else{
			$hostname = "\\\\" . $2;
			$i = 2;
		}
		if (@_[$i] in %reghives)
		{
			$hive = %reghives[@_[$i]];
			$i++;
		}
		else
		{
			berror($1, beacon_command_detail("reg_query_recursive"));
			berror($1, "Provided registry hive value is invalid");
			return;
		}
		$path = @_[$i];
		println($path);
		$i++;
		$args = bof_pack($1, "zizzi", $hostname, $hive, $path, "", 1);
		beacon_inline_execute($1, readbof($1, "reg_query"), "go", $args);
	}
}

beacon_command_register(
	"reg_query_recursive",
	"[BOF] recursivly querys registry key",
"<opt:hostname> <hive> <path> 
hive should be one of:
	HKLM
	HKCU
	HKU
	HKCR
If a value to query is not specified, that one key is enumerated");


alias tasklist{
	local('$args $system')

	$system = "";

	if ((size(@_) < 1) || (size(@_) > 2))
	{
		berror($1, beacon_command_detail("tasklist"));
		berror($1, "Invalid number of arguments");
		return;
	}
	$system = iff(-istrue $2, $2, ".");
	blog($1, "Connecting to \\\\$system and retrieving list of currently running processes");
	$args = bof_pack($1, "Z", $system);
	beacon_inline_execute($1, readbof($1, "tasklist"), "go", $args);
}

beacon_command_register(
	"tasklist",
	"[BOF] Lists currently running processes",
	"
Command: tasklist
Summary: This command displays a list of currently running processes on either
		 a local or remote machine.
Usage:   tasklist (system)
		 system	   - Optional. Specifies the remote system to connect to. Do
						not include or use '.' to indicate the command should
						be run on the local system.
Note:	You must have a valid login token for the system specified if not
		 local. This token can be obtained using make_token.
"
);


alias wmi_query{
	local('$query $system $namespace $args')

	if ((size(@_) < 2) || (size(@_) > 4))
	{
		berror($1, beacon_command_detail("wmi_query"));
		berror($1, "Invalid number of arguments");
		return;
	}
	$query = $2;
	$system = iff(-istrue $3, $3, ".");
	$namespace = iff(-istrue $4, $4, "root\\cimv2");

	blog($1, "Connecting to \\\\$system\\$namespace and running the WMI query \'$query\'");

	$args = bof_pack($1, "ZZZ", $system, $namespace, $query);
	beacon_inline_execute($1, readbof($1, "wmi_query"), "go", $args);
}

beacon_command_register(
	"wmi_query",
	"[BOF] Runs a general WMI query",
	"
Command: wmi_query
Summary: This command runs a general WMI query on either a local or remote
		 machine and displays the results in a comma separated table.
Usage:   wmi_query [query] (system) (namespace)
		 query		- The query to run. The query should be in WQL.
		 system	   - Optional. Specifies the remote system to connect to. Do
						not include or use '.' to indicate the command should
						be run on the local system.
		 namespace	- Optional. Specifies the namespace to connect to. This
						defaults to root\\cimv2 if not specified.
Note:	You must have a valid login token for the system specified if not
		 local. This token can be obtained using make_token.
"
);


alias netsession {
	local('$args $hostname');

	$args = bof_pack($1, "Z", $2);
	beacon_inline_execute($1, readbof($1, "get-netsession"), "go", $args);
}

beacon_command_register(
	"netsession",
	"[BOF] list sessions on server",
	"Synopsis: netsession <computer> "
);

## --start-- domaininfo
alias domaininfo {
	beacon_inline_execute($1, readbof($1, "get-domaininfo"), "go", $null);
}

beacon_command_register(
	"domaininfo",
	"[BOF] Returns information on the current domain and domain controller.",
	"Usage: domaininfo"
);
## --end-- domaininfo

## --start-- clipboard
alias clipboard {
	beacon_inline_execute($1, readbof($1, "get-clipboard"), "go", $null);
}

beacon_command_register(
	"clipboard",
	"[BOF] Prints any text on the clipboard.",
	"Usage: clipboard"
);
## --end-- clipboard

## --start-- wifidump
alias wifidump {
	local('$args');
	$args = bof_pack($1, "Z", $2);
	# announce what we're doing
	btask($1, "Running wifidump BOF");

	beacon_inline_execute($1, readbof($1, "wifidump"), "go", $args);
}

beacon_command_register(
	"wifidump",
	"[BOF] dumps wifi clear text credentials",
	"Usage: wifidump [Wifi_Profile_Name]"
);
## --end-- wifidump

## --start-- wifienum
alias wifienum {
	# announce what we're doing
	btask($1, "Running wifienum BOF");

	beacon_inline_execute($1, readbof($1, "wifienum"), "go", $null);
}

beacon_command_register(
	"wifienum",
	"[BOF] Enumerates WiFi interfaces.",
	"Usage: wifienum"
);
## --end-- wifienum

## --start-- portscan
alias bportscan {
	local('$handle $args');

	# pack our arguments
	$args   = bof_pack($1, "zz", $2, $3);
	# announce what we're doing
	btask($1, "Running bportscan BOF");

	beacon_inline_execute($1, readbof($1, "portscan"), "go", $null);
}

beacon_command_register(
	"bportscan",
	"[BOF] Scans a single port on a remote host.",
	"Usage: bportscan [192.168.1.10] [3389]"
);
## --end-- portscan

## --start-- curl
beacon_command_register(
"curl", 
"[BOF] Performs a web request against target server and port",
"curl host [port] [method] [--show] [useragent] [headers] [body] [--noproxy]");

alias curl {
	local('$barch $args');

	if(size(@_) < 2)
	{
		berror($1, "Incorrect usage!");
		berror($1, beacon_command_detail("curl"));
		return;
	}

	# figure out the arch of this session
	$barch  = barch($1);

	$printoutput = 0;
	if ($5 eq "--show"){
		$printoutput = 1;
	}
	
	$proxy = 1;
	if ($5 eq "--noproxy"){
		$proxy = 0;
	}

	if (size(@_) >= 4){
		if (($4 ne "GET") && 
			($4 ne "POST") && 
			($4 ne "PUT") && 
			($4 ne "PATCH") && 
			($4 ne "DELETE"))
		{
			berror($1, "HTTP method  $+ $4 $+  isn't valid.");
			berror($1, beacon_command_detail("curl"));
			return;
		}
	}

	if(size(@_) == 2)
	{
		# pack our arguments
		$args = bof_pack($1, "zizizzzi", $2, 0, "GET", $printoutput, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36", "Accept: */*", "", $proxy);
	
	}else if(size(@_) == 3)
	{
		# pack our arguments
		$args = bof_pack($1, "zizizzzi", $2, $3, "GET", $printoutput, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36", "Accept: */*", "", $proxy);
	
	} else if(size(@_) == 4)
	{

		# include method
		$args = bof_pack($1, "zizizzzi", $2, $3, $4, $printoutput, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36", "Accept: */*", "", $proxy);
	
	} else if(size(@_) == 5)
	{
		# include print option
		$args = bof_pack($1, "zizizzzi", $2, $3, $4, $printoutput, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36", "Accept: */*", "", $proxy);
	} else if(size(@_) == 6)
	{
		# include useragent
		$args = bof_pack($1, "zizizzzi", $2, $3, $4, $printoutput, $6, "Accept: */*", "", $proxy);
	} else if(size(@_) == 7)
	{
		# include headers
		$args = bof_pack($1, "zizizzzi", $2, $3, $4, $printoutput, $6, $7, "", $proxy);
	} else if(size(@_) == 8)
	{
		# include body
		$args = bof_pack($1, "zizizzzi", $2, $3, $4, $printoutput, $6, $7, $8, $proxy);
	} else if(size(@_) == 9)
	{
		# include proxy choice
		$args = bof_pack($1, "zizizzzi", $2, $3, $4, $printoutput, $6, $7, $8, $proxy);
	}

	# announce what we're doing
	btask($1, "Running Simple Web Request Utility (@ajpc500)");

	# execute it.
	beacon_inline_execute($1, readbof($1, "curl"), "go", $args);
}
## --end-- curl

## --start-- etw
beacon_command_register(
	"etw", 
	"[BOF] Start or stop ETW logging.", 
	"etw stop - patch out EtwEventWrite in Ntdll.dll to prevent ETW-based logging.
	 etw start - patch back in EtwEventWrite in Ntdll.dll to restart ETW-based logging."
);

alias etw {
	local('$barch $args');

	if(size(@_) != 2)
	{
		berror($1, "Incorrect usage!");
		berror($1, beacon_command_detail("etw"));
		return;
	}

	if(($2 eq "start")||($2 eq "stop"))
	{
		# figure out the arch of this session
		$barch  = barch($1);

		# pack our arguments
		$args = bof_pack($1, "z", $2);
		
		# announce what we're doing
		btask($1, "Running ETW patching BOF (@ajpc500)");
		
		# execute it.
		beacon_inline_execute($1, readbof($1, "etw"), "go", $args);
	}else{
		berror($1, "Incorrect usage!");
		berror($1, beacon_command_detail("etw"));
		return;
	}
}
## --end-- etw

## --start-- functionutil
beacon_command_register(
"read_function", 
"[BOF] Read in-memory API function call, compare to on-disk DLL and patch bytes from on-disk DLL.",
"read_function ntdll.dll EtwEventWrite - Retrieve function bytes.");



beacon_command_register(
"check_function", 
"[BOF] Read in-memory API function call, compare to on-disk DLL and patch bytes from on-disk DLL.",
"check_function ntdll.dll EtwEventWrite - Retrieve function bytes from memory and disk and compare.");


beacon_command_register(
"patch_function", 
"[BOF] Read in-memory API function call, compare to on-disk DLL and patch bytes from on-disk DLL.",
"patch_function ntdll.dll EtwEventWrite - Write on-disk function bytes onto in-memory function.");


alias read_function {
	local('$args');

	if(size(@_) != 3)
	{
		berror($1, "Incorrect usage!");
		berror($1, beacon_command_detail("read_function"));
		return;
	}

	# pack our arguments
	$args = bof_pack($1, "zzi", $2, $3, 0);
	
	# announce what we're doing
	btask($1, "Running API Function Utility (@ajpc500)");
	
	# execute it.
	beacon_inline_execute($1, readbof($1, "functionutil"), "go", $args);
}

alias check_function {
	local('$args');

	if(size(@_) != 3)
	{
		berror($1, "Incorrect usage!");
		berror($1, beacon_command_detail("check_function"));
		return;
	}

	# pack our arguments
	$args = bof_pack($1, "zzi", $2, $3, 1);
	
	# announce what we're doing
	btask($1, "Running API Function Utility (@ajpc500)");

	# execute it.
	beacon_inline_execute($1, readbof($1, "functionutil"), "go", $args);
}

alias patch_function {
	local('$args');

	if(size(@_) != 3)
	{
		berror($1, "Incorrect usage!");
		berror($1, beacon_command_detail("patch_function"));
		return;
	}

	# pack our arguments
	$args = bof_pack($1, "zzi", $2, $3, 2);
	
	# announce what we're doing
	btask($1, "Running API Function Utility (@ajpc500)");

	# execute it.
	beacon_inline_execute($1, readbof($1, "functionutil"), "go", $args);
}
## --end-- functionutil

alias resources {
	beacon_inline_execute($1, readbof($1, "resources"), "go", $null);
}

beacon_command_register(
"resources",
"[BOF] List available memory and space on the primary disk drive",
"Usage: resources");


alias uptime {
		beacon_inline_execute($1, readbof($1, "uptime"), "go", $null);
}

beacon_command_register(
"uptime",
"[BOF] Lists system boot time",
"Usage: uptime");



alias enum_filter_driver{
	local('$args $system')

	$system = "";

	if ((size(@_) < 1) || (size(@_) > 2))
	{
		berror($1, beacon_command_detail("enum_filter_driver"));
		berror($1, "Invalid number of arguments");
		return;
	}
	$system = iff(-istrue $2, $2, $null);
	blog($1, "Retrieving list of filter drivers");
	$args = bof_pack($1, "z", $system);
	beacon_inline_execute($1, readbof($1, "enum_filter_driver"), "go", $args);
}

beacon_command_register(
	"enum_filter_driver",
	"[BOF] Lists filter drivers on the system",
	"
Command: enum_filter_driver
Summary: This command displays a list of filter drivers installed on the 
         system. The results are returned in a CSV format with the type, name,
         and altitude number.
Usage:   enum_filter_driver <opt:system>
         system    Optional. Specifies the remote system to connect to. Do not 
                   include a system argument to indicate the command should be 
                   run on the local system.
Note:    You must have a valid login token for the system specified if not 
         local. This token can be obtained using make_token.
"
);



alias adv_audit_policies{
	local('$iswow64')
		
	$iswow64 = iff(-is64 $1 && barch($1) eq "x86", 1, 0);

	blog($1, "Retrieving advanced security audit policies... iswow64: $iswow64");

    beacon_inline_execute($1, readbof($1, "adv_audit_policies"), "go", bof_pack($1, "i", $iswow64));
}

beacon_command_register(
	"adv_audit_policies",
	"[BOF] Retrieves advanced security audit policies",
	"
Command: adv_audit_policies
Summary: This command retrieves the advanced security audit policies set in the
         group policy of the local system and/or domain.
Usage:   adv_audit_policies
"
);

alias listpipes
{
	blog($1, "Listing Named Pipes");
	bls($1, "//./pipe/");
}

beacon_command_register(
	"listpipes",
	"[BOF] Lists local named pipes",
	"Usage: listpipes"
);
alias enumLocalSessions{
	beacon_inline_execute($1, readbof($1, "enumlocalsessions"), "go", $null);
}

alias findLoadedModule{
	local('$iswow64 $modname $procname $args');
	if(-is64 $1 && barch($1) eq "x86")
	{
		berror($1, "Unable to run this BOF properly when under WOW64 (32bit proc on 64bit host)");
		return;
	}
	if(size(@_) > 3 || size(@_) < 2){
		berror($1, "Invalid number of arguments");
		berror($1, beacon_command_detail("findLoadedModule"));
		return;
	}
	$modname = $2;
	$procname = iff(-istrue $3, $3, "");
	$args = bof_pack($1, "zz", $modname, $procname);
	beacon_inline_execute($1, readbof($1, "findLoadedModule"), "go", $args);
}

beacon_command_register(
	"findLoadedModule",
	"[BOF] Finds processes loading a specific dll",
	"Usage:
	findLoadedModule <part dll name> [opt: part proc name]
	
	Searches are done in *<part>* manner, so partial matches will hit
	If you specify a proc name then only processes matching that partial hit will be searched"
);


alias adcs_enum{
	local('$args');

	$args = $null;
	beacon_inline_execute($1, readbof($1, "adcs_enum"), "go", $args);
}

beacon_command_register(
	"adcs_enum",
	"[BOF] Enumerates CAs and templates in the AD using Win32 functions",
	"
Command: adcs_enum
Summary: This command enumerates the certificate authorities and certificate 
         types (templates) in the Acitive Directory Certificate Services using
         undocumented Win32 functions. It displays basic information as well 
         as the CA cert, flags, permissions, and similar information for the 
         templates.
Usage:   adcs_enum
"
);


alias adcs_enum_com{
	local('$args');

	$args = $null;
	beacon_inline_execute($1, readbof($1, "adcs_enum_com"), "go", $args);
}

beacon_command_register(
	"adcs_enum_com",
	"[BOF] Enumerates CAs and templates in the AD using ICertConfig COM object",
	"
Command: adcs_enum_com
Summary: This command enumerates the certificate authorities and certificate 
         types (templates) in the Acitive Directory Certificate Services using 
         the ICertConfig, ICertRequest, and IX509CertificateTemplate COM 
         objects. It displays basic information as well as the CA cert, flags, 
         permissions, and similar information for the templates.
Usage:   adcs_enum_com
"
);


alias adcs_enum_com2{
	local('$args');

	$args = $null;
	beacon_inline_execute($1, readbof($1, "adcs_enum_com2"), "go", $args);
}

beacon_command_register(
	"adcs_enum_com2",
	"[BOF] Enumerates CAs and templates in the AD using IX509PolicyServerListManager COM object",
	"
Command: adcs_enum_com2
Summary: This command enumerates the certificate authorities and certificate 
         types (templates) in the Acitive Directory Certificate Services using 
         the IX509PolicyServerListManager, IX509PolicyServerUrl, 
         IX509EnrollmentPolicyServer, ICertificationAuthority, and 
         IX509CertificateTemplate COM objects. It displays basic information as
         well as the CA cert, flags, permissions, and similar information for
         the templates.
Usage:   adcs_enum_com2
"
);

alias vssenum{
	local('$hostname $sharename $args');
	if (size(@_) < 2)
	{
		berror($1, "Invalid number of arguments");
		berror($1, beacon_command_detail("vssenum"));
		return;
	}

	$hostname = $2;
	$sharename = iff(-istrue $3, $3, "C$");
	$args = bof_pack($1, "ZZ", $hostname, $sharename);
	blog($1, $hostname);
	beacon_inline_execute($1, readbof($1, "vssenum"), "go", $args);

}



beacon_command_register(
	"vssenum",
	"[BOF] Enumerate snapshots on a remote machine",
"Command: vssenum
If the target machine has volume snapshots this command will list there timestamps
This command will likely only work on windows server 2012 + with specific configurations
see https://techcommunity.microsoft.com/t5/storage-at-microsoft/vss-for-smb-file-shares/ba-p/425726 for more info

Usage: vssenum [hostname] (opt: sharename)

sharename defaults to C$ if not specified"
);

